#!/usr/bin/env python
"""
install.py

General installation script for the segway package. Interacts with
the user to configure the environment to download and install all
dependencies and the segway package.

This script is designed to be downloaded and run independently, and
will guide the process of downloading and installing all other source
code.

(c) 2009: Orion Buske <orion.buske@gmail.com>

XXX: Completely untested
"""

${COMMON_CODE_HEADER}

MIN_HDF5_VERSION = "1.8"
MIN_NUMPY_VERSION = "1.2"
MIN_DRMAA_VERSION = "0.4a3"

# Should match download URLs below (displayed to user)
LSF_DRMAA_DOWNLOAD_VERSION = "1.0.3"
LSF_DRMAA_URL = "http://softlayer.dl.sourceforge.net/project/lsf-drmaa/lsf_drmaa/1.0.3/lsf_drmaa-1.0.3.tar.gz"

LSF_DRMAA_INSTALL_SCRIPT = """
if [ ! -e $file ]; then wget $url -O $file; fi
if [ ! -d $filebase ]; then tar -xzf $file; fi
cd $filebase
./configure --prefix=$dir
make
make install
rm -f $file
"""

SEGWAY_INSTALL_SCRIPT = """
cd $dir
python setup.py install
"""

${COMMON_CODE_BODY}

############################## MAIN #########################
def main(args=sys.argv[1:]):
    # Set up shell details
    try:
        shell_name = os.path.basename(os.environ["SHELL"])
    except KeyError:
        shell_name = None
    shell = ShellManager(shell_name)
                
    try:
        # Set up arch_home
        arch_home = setup_arch_home()
        
        # Set up python home
        python_home, default_python_home = setup_python_home(arch_home)
        # Add python_home to PYTHONPATH
        prompt_add_to_env(shell, "PYTHONPATH", python_home)
        
        # Set up bin directory
        script_home, default_script_home = setup_script_home(arch_home)
        # Add script_home to PATH
        prompt_add_to_env(shell, "PATH", script_home)

        # Maybe create pydistutils.cfg
        prompt_create_cfg(arch_home, python_home, default_python_home,
                          script_home, default_script_home)
            
        # Add HDF5, if necessary
        hdf5_dir = setup_hdf5_installation(shell, arch_home)

        # Add Numpy, if necessary
        prompt_install_numpy()

        # Ensure gmtkViterbi in path
        check_executable_in_path("gmtkViterbi")

        # Install segway (and dependencies)
        prompt_install_segway()

        # Test package installations
        prompt_test_packages(python_home)

        print >>sys.stderr, "\n============ Installation complete! ==========="
        
    finally:  # Clean up
        shell.close()

########################### GET VERSION ########################
def get_segway_version():
    """Returns segway version as a string or None if not found or installed

    Temporarily removes '.' from sys.path during installation to prevent
    finding segway in current directory (but uninstalled)
    
    Since segway __version__ is currently a revision number, get the full
    number from pkg_resources
    """
    dir = os.getcwd()
    index = None
    if dir in sys.path:
        index = sys.path.index(dir)
        del sys.path[index]

    try:
        try:
            ref = pkg_resources.Requirement.parse("segway")
            data = pkg_resources.working_set.find(ref)
            return data.version
        except (AttributeError, ImportError):
            return None
    finally:
        if index is not None:
            sys.path.insert(index, dir)
    
def is_lsf_drmaa_installed():
    """Returns True if library found, None otherwise."""
    return can_find_library("libdrmaa.so")
    
def get_drmaa_version():
    """Returns drmaa-python version as a string or None if not found or
    installed
    """
    try:
        import drmaa
        return drmaa.__version__
    except (AttributeError, ImportError):
        return None

##################### SPECIFIC PROGRAM INSTALLERS ################
def prompt_install_lsf_drmaa(arch_home):
    return _installer("FedStage DRMAA for LSF", install_lsf_drmaa,
                      is_lsf_drmaa_installed,
                      version=LSF_DRMAA_DOWNLOAD_VERSION,
                      arch_home=arch_home)

def prompt_install_drmaa():
    return _installer("drmaa-python", install_drmaa, get_drmaa_version,
                      install_prompt=EASY_INSTALL_PROMPT)

def prompt_install_segway():
    return _installer("segway", install_segway, get_segway_version,
                      install_prompt = EASY_INSTALL_PROMPT)
                            
def install_lsf_drmaa(arch_home, *args, **kwargs):
    progname = "FedStage DRMAA for LSF"
    drmaa_dir = prompt_install_path(progname, arch_home)
    install_dir = install_script(progname, drmaa_dir,
                                 LSF_DRMAA_INSTALL_SCRIPT,
                                 url=LSF_DRMAA_URL)
    return install_dir

def install_drmaa(min_version=MIN_DRMAA_VERSION, *args, **kwargs):
    return easy_install("drmaa", min_version=min_version)

def install_segway(*args, **kwargs):
    lsf_found = has_lsf()
    sge_found = has_sge()
    if not (lsf_found or sge_found):
        print >>sys.stderr, """
Segway can only be run where there is a cluster management system.
I was unable to find either an LSF or SGE system.
Please try reinstalling on a system with one of these installed."""
        return None

    if lsf_found and not sge_found:
        # Need to download and install FedStage lsf-drmaa
        prompt_install_lsf_drmaa(arch_home)

    prompt_install_drmaa()
    query = "Where is the segway source located?"
    segway_dir = prompt_path(query, default=".")
    return install_script("segway", segway_dir, SEGWAY_INSTALL_SCRIPT)
    

if __name__ == "__main__":
    sys.exit(main())
